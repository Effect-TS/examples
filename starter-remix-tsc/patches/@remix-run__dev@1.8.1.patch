diff --git a/dist/compiler/compileBrowser.js b/dist/compiler/compileBrowser.js
index 1a1bde8150035aee58b2c75f56d038bed181d6b2..264034ebd954ae80f1fad215425d8036640eef04 100644
--- a/dist/compiler/compileBrowser.js
+++ b/dist/compiler/compileBrowser.js
@@ -26,6 +26,7 @@ var emptyModulesPlugin = require('./plugins/emptyModulesPlugin.js');
 var mdx = require('./plugins/mdx.js');
 var urlImportsPlugin = require('./plugins/urlImportsPlugin.js');
 var fs = require('./utils/fs.js');
+var tsPlugin = require('./plugins/tsPlugin');
 
 function _interopNamespace(e) {
   if (e && e.__esModule) return e;
@@ -76,7 +77,7 @@ const createEsbuildConfig = (config, options) => {
     // that we don't want to run in the browser (i.e. action & loader).
     entryPoints[id] = config.routes[id].file + "?browser";
   }
-  let plugins = [deprecatedRemixPackagePlugin.deprecatedRemixPackagePlugin(options.onWarning), cssFilePlugin.cssFilePlugin(options), urlImportsPlugin.urlImportsPlugin(), mdx.mdxPlugin(config), browserRouteModulesPlugin.browserRouteModulesPlugin(config, /\?browser$/), emptyModulesPlugin.emptyModulesPlugin(config, /\.server(\.[jt]sx?)?$/), nodeModulesPolyfill.NodeModulesPolyfillPlugin()];
+  let plugins = [tsPlugin.tsPlugin(), deprecatedRemixPackagePlugin.deprecatedRemixPackagePlugin(options.onWarning), cssFilePlugin.cssFilePlugin(options), urlImportsPlugin.urlImportsPlugin(), mdx.mdxPlugin(config), browserRouteModulesPlugin.browserRouteModulesPlugin(config, /\?browser$/), emptyModulesPlugin.emptyModulesPlugin(config, /\.server(\.[jt]sx?)?$/), nodeModulesPolyfill.NodeModulesPolyfillPlugin()];
   return {
     entryPoints,
     outdir: config.assetsBuildDirectory,
diff --git a/dist/compiler/compilerServer.js b/dist/compiler/compilerServer.js
index 1970619d8f07b35591374502984ec3300819f478..d3b40cabf96bbe08a67a85474374d89cd3becb6d 100644
--- a/dist/compiler/compilerServer.js
+++ b/dist/compiler/compilerServer.js
@@ -26,6 +26,7 @@ var serverBareModulesPlugin = require('./plugins/serverBareModulesPlugin.js');
 var serverEntryModulePlugin = require('./plugins/serverEntryModulePlugin.js');
 var serverRouteModulesPlugin = require('./plugins/serverRouteModulesPlugin.js');
 var urlImportsPlugin = require('./plugins/urlImportsPlugin.js');
+var tsPlugin = require('./plugins/tsPlugin');
 
 function _interopNamespace(e) {
   if (e && e.__esModule) return e;
@@ -67,6 +68,7 @@ const createEsbuildConfig = (config, assetsManifestChannel, options) => {
   if (config.serverPlatform !== "node") {
     plugins.unshift(nodeModulesPolyfill.NodeModulesPolyfillPlugin());
   }
+  plugins.unshift(tsPlugin.tsPlugin());
   return {
     absWorkingDir: config.rootDirectory,
     stdin,
diff --git a/dist/compiler/plugins/tsPlugin.js b/dist/compiler/plugins/tsPlugin.js
new file mode 100644
index 0000000000000000000000000000000000000000..300c15a70a7a183a26c0d85dda84a98b9d6725ac
--- /dev/null
+++ b/dist/compiler/plugins/tsPlugin.js
@@ -0,0 +1,90 @@
+const crypto = require("crypto");
+const nodePath = require("path");
+const ts = require("typescript");
+
+let tsPlugin = () => {
+  const registry = ts.createDocumentRegistry();
+
+  const files = new Set();
+
+  const configPath = ts.findConfigFile(
+    "./",
+    ts.sys.fileExists,
+    "tsconfig.json"
+  );
+
+  if (!configPath) {
+    throw new Error('Could not find a valid "tsconfig.json".');
+  }
+
+  const { config } = ts.parseConfigFileTextToJson(
+    configPath,
+    ts.sys.readFile(configPath)
+  );
+
+  Object.assign(config.compilerOptions, {
+    sourceMap: false,
+    inlineSourceMap: true,
+    inlineSources: true,
+    noEmit: false,
+    declaration: false,
+    declarationMap: false,
+    module: "ESNext",
+    target: "ES2022",
+  });
+
+  const tsconfig = ts.parseJsonConfigFileContent(
+    config,
+    ts.sys,
+    nodePath.dirname(nodePath.resolve(configPath))
+  );
+
+  if (!tsconfig.options) tsconfig.options = {};
+
+  tsconfig.fileNames.forEach((fileName) => {
+    files.add(fileName);
+  });
+
+  const servicesHost = {
+    getScriptFileNames: () => Array.from(files),
+    getScriptVersion: (fileName) => {
+      const fileBuffer = ts.sys.readFile(fileName);
+      if (fileBuffer) {
+        const hashSum = crypto.createHash("sha256");
+        hashSum.update(fileBuffer, "utf-8");
+        return hashSum.digest("hex");
+      } else {
+        files.delete(fileName);
+      }
+    },
+    getScriptSnapshot: (fileName) => {
+      if (!ts.sys.fileExists(fileName)) {
+        return undefined;
+      }
+      return ts.ScriptSnapshot.fromString(ts.sys.readFile(fileName).toString());
+    },
+    getCurrentDirectory: () => process.cwd(),
+    getCompilationSettings: () => tsconfig.options,
+    getDefaultLibFileName: (options) => ts.getDefaultLibFilePath(options),
+    fileExists: (fileName) => ts.sys.fileExists(fileName),
+    readFile: (fileName) => ts.sys.readFile(fileName),
+  };
+
+  const services = ts.createLanguageService(servicesHost, registry);
+
+  return {
+    name: "ts-plugin",
+    setup(build) {
+      build.onLoad({ filter: /(.ts|.tsx|.tsx?browser)$/ }, (args) => {
+        const path = args.path;
+        files.add(path);
+        return {
+          contents: services.getEmitOutput(path).outputFiles[0].text,
+          loader: "js",
+        };
+      });
+    },
+  };
+};
+
+exports.tsPlugin = tsPlugin;